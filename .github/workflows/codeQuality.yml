name: Full Stack Quality Checker

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to run checks on'
        required: false
        default: 'Dev'
        type: string
      backend_path:
        description: 'Path to backend folder'
        required: false
        default: '.'
        type: string
      frontend_path:
        description: 'Path to frontend folder'
        required: false
        default: 'Frontend'
        type: string
      lockfile_paths:
        description: 'Paths to frontend lock files (comma-separated)'
        required: false
        default: 'Frontend/package-lock.json,Frontend/yarn.lock,Frontend/pnpm-lock.yaml'
        type: string

  push:
    branches: ["${{ inputs.branch }}"]
  pull_request:
    branches: ["${{ inputs.branch }}"]

jobs:
  backend-quality:
    name: Python Backend Quality Check
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.backend_path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          echo "Installing backend dependencies..."
          python -m pip install --upgrade pip
          pip install ruff pytest
          echo "Backend dependencies installed."

      - name: Run Ruff lint
        run: |
          echo "Running Ruff lint check..."
          ruff check .
          echo "Linting complete."

      - name: Run Ruff format check
        run: |
          echo "Checking code formatting..."
          ruff format --check .
          echo "Format check complete."

      - name: Run Pytest
        run: |
          echo "Running backend tests..."
          pytest -q
          echo "Backend testing complete."

  frontend-quality:
    name: Frontend Quality Check
    runs-on: ubuntu-latest
    if: success()  # Stop if backend fails (no 'always()')

    defaults:
      run:
        working-directory: ${{ inputs.frontend_path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect
        run: |
          LOCKFILES="${{ inputs.lockfile_paths }}"
          if echo "$LOCKFILES" | grep -q "package-lock.json" && [ -f package-lock.json ]; then
            echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
          elif echo "$LOCKFILES" | grep -q "yarn.lock" && [ -f yarn.lock ]; then
            echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
          elif echo "$LOCKFILES" | grep -q "pnpm-lock.yaml" && [ -f pnpm-lock.yaml ]; then
            echo "PACKAGE_MANAGER=pnpm" >> $GITHUB_ENV
          else
            echo "PACKAGE_MANAGER=none" >> $GITHUB_ENV
          fi
          echo "Detected package manager: $PACKAGE_MANAGER"

      - name: Setup Node
        if: env.PACKAGE_MANAGER != 'none'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: ${{ env.PACKAGE_MANAGER }}
          cache-dependency-path: ${{ inputs.lockfile_paths }}

      - name: Install dependencies
        if: env.PACKAGE_MANAGER != 'none'
        run: |
          echo "Installing frontend dependencies..."
          case $PACKAGE_MANAGER in
            npm) npm ci || npm install ;;
            yarn) yarn install --frozen-lockfile ;;
            pnpm) pnpm install ;;
          esac
          echo "Frontend dependencies installed."

      - name: Run TypeScript check (if tsconfig.json exists)
        run: |
          if [ -f tsconfig.json ]; then
            echo "Running TypeScript type checks..."
            case $PACKAGE_MANAGER in
              npm) npm run check ;;
              yarn) yarn run check ;;
              pnpm) pnpm run check ;;
            esac
            echo "TypeScript check complete."
          else
            echo "No tsconfig.json found — skipping TypeScript checks."
          fi

      - name: Build frontend
        run: |
          echo "Building frontend..."
          case $PACKAGE_MANAGER in
            npm) npm run build ;;
            yarn) yarn run build ;;
            pnpm) pnpm run build ;;
          esac
          echo "Build completed."

      - name: Run ESLint (check for unused variables/imports)
        run: |
          echo "Checking ESLint configuration..."
          if ls eslint.config.* .eslintrc* 1> /dev/null 2>&1; then
            echo "ESLint configuration found — running lint..."
            case $PACKAGE_MANAGER in
              npm) npm run lint ;;
              yarn) yarn run lint ;;
              pnpm) pnpm run lint ;;
            esac
          else
            echo "No ESLint configuration found — using default rules."
            npm install --no-save eslint eslint-plugin-unused-imports > /dev/null 2>&1 || true

            cat << 'EOF' > eslint.config.js
            import unusedImports from "eslint-plugin-unused-imports";
            export default [
              {
                files: ["**/*.{js,jsx,ts,tsx}"],
                languageOptions: { ecmaVersion: 2020, sourceType: "module" },
                plugins: { "unused-imports": unusedImports },
                rules: {
                  "no-unused-vars": ["error"],
                  "no-undef": ["error"],
                  "no-console": ["warn"],
                  "no-debugger": ["warn"],
                  "unused-imports/no-unused-imports": ["error"]
                },
              },
            ];
            EOF

            npx eslint . -f stylish --max-warnings=0
            rm -f eslint.config.js
          fi
          echo "ESLint check completed."
